--- 
 import Layout from '../layouts/Layout.astro'; 
 --- 
 
 <Layout title="Sistema de Reservas Distribuidas"> 
   <main class="min-h-screen bg-gray-900 text-white p-4 sm:p-6 lg:p-8"> 
     <div class="max-w-7xl mx-auto"> 
       <!-- Header --> 
       <header class="text-center mb-8"> 
         <h1 class="text-4xl font-bold text-cyan-400"> 
           🎬 Sistema de Reservas Distribuido 
         </h1> 
         <p class="text-red-400 mt-2"> 
           <span class="font-semibold">Atención:</span> Este sistema tiene condiciones de carrera intencionales. 
         </p> 
       </header> 
 
       <!-- Panel de Control --> 
       <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 mb-8 shadow-lg border border-cyan-400/20"> 
         <div class="grid grid-cols-1 md:grid-cols-3 gap-6"> 
           <!-- Selector de Servidor --> 
           <div> 
             <label for="server-select" class="block text-sm font-medium text-cyan-300 mb-2">Servidor</label> 
             <select id="server-select" class="w-full bg-gray-700 border-gray-600 text-white rounded-lg p-2.5 focus:ring-cyan-500 focus:border-cyan-500"> 
               <option value="http://localhost:8081">Servidor 1 (8081)</option> 
               <option value="http://localhost:8082">Servidor 2 (8082)</option> 
               <option value="http://localhost:8083">Servidor 3 (8083)</option> 
             </select> 
           </div> 
 
           <!-- Input de Nombre --> 
           <div> 
             <label for="client-name" class="block text-sm font-medium text-cyan-300 mb-2">Tu Nombre</label> 
             <input type="text" id="client-name" class="w-full bg-gray-700 border-gray-600 text-white rounded-lg p-2.5 focus:ring-cyan-500 focus:border-cyan-500" placeholder="Ingresa tu nombre"> 
           </div> 
 
           <!-- Botón de Recargar --> 
           <div> 
             <label class="block text-sm font-medium text-transparent mb-2">Acción</label> 
             <button id="reload-button" class="w-full bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-2.5 px-4 rounded-lg transition-transform transform hover:scale-105"> 
               Recargar Asientos 
             </button> 
           </div> 
         </div> 
       </div> 
 
       <!-- Sección de Asientos --> 
       <div class="text-center mb-4"> 
         <h2 class="text-2xl font-semibold text-cyan-300">Asientos Disponibles</h2> 
       </div> 
       <div id="seats-container" class="grid grid-cols-5 sm:grid-cols-8 md:grid-cols-10 gap-4"> 
         <!-- Los asientos se cargarán aquí --> 
       </div> 
     </div> 
   </main> 
 
   <script> 
     interface Seat {
       numero: number;
       disponible: boolean;
       cliente?: string;
     }

     document.addEventListener('DOMContentLoaded', () => {
       const serverSelect = document.getElementById('server-select') as HTMLSelectElement;
       const clientNameInput = document.getElementById('client-name') as HTMLInputElement;
       const seatsContainer = document.getElementById('seats-container');
       const reloadButton = document.getElementById('reload-button');

       if (!serverSelect || !clientNameInput || !seatsContainer || !reloadButton) {
         console.error('Error: No se pudieron encontrar los elementos del DOM necesarios.');
         return;
       }

       let currentServer = serverSelect.value;

       const fetchSeats = async () => {
         try {
           const response = await fetch(`${currentServer}/asientos`);
           if (!response.ok) throw new Error('Error al cargar los asientos');
           const data = await response.json();
           renderSeats(data.asientos);
         } catch (error) {
           console.error(error);
           if (seatsContainer) {
             seatsContainer.innerHTML = `<p class="text-red-400 col-span-full">Error de conexión con el servidor.</p>`;
           }
         }
       };

       const renderSeats = (seats: { [key: string]: Seat }) => {
         if (!seatsContainer) return;
         seatsContainer.innerHTML = '';
         Object.values(seats).forEach((seat: Seat) => {
           const seatElement = document.createElement('div');
           const isOccupied = !seat.disponible;
           seatElement.className = `p-2 rounded-lg text-center cursor-pointer transition-all transform hover:scale-110 ${isOccupied ? 'bg-red-600/70' : 'bg-green-500/80'}`;
           seatElement.dataset.seatNumber = String(seat.numero);

           if (isOccupied) {
             seatElement.innerHTML = `<span>🔒 ${seat.numero}</span><br><span class="text-xs">${seat.cliente || 'N/A'}</span>`;
             seatElement.title = `Ocupado por: ${seat.cliente || 'N/A'}`;
           } else {
             seatElement.textContent = `💺 ${seat.numero}`;
           }

           seatElement.addEventListener('click', () => handleSeatClick(seat.numero, isOccupied));
           seatsContainer.appendChild(seatElement);
         });
       };

       const handleSeatClick = async (seatNumber: number, isOccupied: boolean) => {
         const clientName = clientNameInput.value;
         if (isOccupied) {
           await freeSeat(seatNumber);
         } else {
           if (!clientName) {
             alert('Por favor, ingresa tu nombre para reservar.');
             return;
           }
           await reserveSeat(seatNumber, clientName);
         }
       };

       const reserveSeat = async (seatNumber: number, clientName: string) => {
         try {
           const response = await fetch(`${currentServer}/reservar`, {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ numero: seatNumber, cliente: clientName }),
           });
           if (!response.ok) {
             const errorData = await response.json().catch(() => ({ message: 'Error al reservar' }));
             throw new Error(errorData.message);
           }
           await fetchSeats();
         } catch (error: any) {
           console.error(error);
           alert(`No se pudo reservar el asiento: ${error.message}`);
         }
       };

       const freeSeat = async (seatNumber: number) => {
         try {
           const response = await fetch(`${currentServer}/liberar`, {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ numero: seatNumber }),
           });
           if (!response.ok) {
             const errorData = await response.json().catch(() => ({ message: 'Error al liberar' }));
             throw new Error(errorData.message);
           }
           await fetchSeats();
         } catch (error: any) {
           console.error(error);
           alert(`No se pudo liberar el asiento: ${error.message}`);
         }
       };

       serverSelect.addEventListener('change', () => {
         currentServer = serverSelect.value;
         fetchSeats();
       });

       reloadButton.addEventListener('click', fetchSeats);

       fetchSeats();
     }); 
   </script> 
 </Layout>
