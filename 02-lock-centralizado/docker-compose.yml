version: '3.8'

services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: mongo-locks
    restart: on-failure
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: locks_db
    volumes:
      - mongo_data:/data/db
    networks:
      - lock-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Lock Coordinator
  coordinator:
    build:
      context: ./coordinator
      dockerfile: Dockerfile
    container_name: lock-coordinator
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongo:27017
    networks:
      - lock-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Reservation Server 1
  server1:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: reservation-server-1
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      coordinator:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      - SERVER_ID=server-1
      - PORT=8081
      - COORDINATOR_URL=http://coordinator:8080
      - MONGO_URI=mongodb://mongo:27017
    networks:
      - lock-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Reservation Server 2
  server2:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: reservation-server-2
    restart: unless-stopped
    ports:
      - "8082:8082"
    depends_on:
      coordinator:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      - SERVER_ID=server-2
      - PORT=8082
      - COORDINATOR_URL=http://coordinator:8080
      - MONGO_URI=mongodb://mongo:27017
    networks:
      - lock-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Reservation Server 3
  server3:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: reservation-server-3
    restart: unless-stopped
    ports:
      - "8083:8083"
    depends_on:
      coordinator:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      - SERVER_ID=server-3
      - PORT=8083
      - COORDINATOR_URL=http://coordinator:8080
      - MONGO_URI=mongodb://mongo:27017
    networks:
      - lock-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Load Balancer (opcional)
  nginx:
    image: nginx:alpine
    container_name: nginx-load-balancer
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - server1
      - server2
      - server3
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - lock-network

volumes:
  mongo_data:
    driver: local

networks:
  lock-network:
    driver: bridge